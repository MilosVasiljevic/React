React apps are made out of components.
React components are JavaScript functions that return markup

function MyButton() {
  return (
    <button>I'm a button</button>
  );
}

///////////

Komponenta moze biti unutar druge

<div>
      <h1>Welcome to my app</h1>
      <MyButton />
</div>

//////////

Mora da bude wrappovano u jednom elementu

function AboutPage() {
  return (
    <>
      <h1>About</h1>
      <p>Hello there.<br />How do you do?</p>
    </>
  );
}

///////

Classname

<img className="avatar" />

//////////

Ispisuje js varijablu
return (
  <h1>
    {user.name}
    src={user.imageUrl}
  </h1>
);

/////////////////

Skraceno za if/else poziva komponentu
<div>
  {isLoggedIn ? (
    <AdminPanel />
  ) : (
    <LoginForm />
  )}
</div>

if (isLoggedIn) {
  content = <AdminPanel />;
} else {
  content = <LoginForm />;
}

///////////

Lista varijablu u html


const products = [
  { title: 'Cabbage', id: 1 },
  { title: 'Garlic', id: 2 },
  { title: 'Apple', id: 3 },
];

const listItems = products.map(product =>
  <li key={product.id}>
    {product.title}
  </li>
);

return (
  <ul>{listItems}</ul>
);


///////////


Event handler

<button onClick={handleClick}>
    Click me
</button>


///////

State se koristi da bi komponenta upamtila neku vrednost

import { useState } from 'react';

definise State
const [count, setCount] = useState(0);

menja mu vrednost
function handleClick() {
    setCount(count + 1);
}

pokazuje vrednost
<button onClick={handleClick}>
      Clicked {count} times
</button>

/////

Ako se komponenta ponavlja, vrednost state ce im biti odvojena, jedan counter nece uticati na drugi

  return (
    <div>
      <h1>Counters that update separately</h1>
      <MyButton />
      <MyButton />
    </div>
  );


function MyButton() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <button onClick={handleClick}>
      Clicked {count} times
    </button>
  );
}

/////

sve što počinje na use je Hook, moraju biti deklarisani na početku komponente


/////

Menjace vrednost u oba buttona zajedno
vrednost koja im se prosledi je Props

const [count, setCount] = useState(0);

function handleClick() {
    setCount(count + 1);
}

return (
    <div>
      <h1>Counters that update together</h1>
      <MyButton count={count} onClick={handleClick} />
      <MyButton count={count} onClick={handleClick} />
    </div>
  );


function MyButton({ count, onClick }) {
  return (
    <button onClick={onClick}>
      Clicked {count} times
    </button>
  );
}



///////

Elementi trebaju biti podeljeni u komponente, koje ce biti nestovane po funkcionalnosti

Nadji minimalni ali kompletni pokazatelj UI-a, dont repeat yourself

State nece ostati nepromenjiv, nece biti poslat kao props, ne moze se izracunati na osnovu postojecih stateova ili propsa

Prop je argument koji se salje child funkciji, state je memorija komponente

Identifikuj koji state kojoj komponenti treba da pripada

Poziva f-ju i salje joj parametar iz vrednosti inputa
onChange={(e) => onFilterTextChange(e.target.value)} />



///////////


OPIS UI

library za renderovanje user interfejsa UI, mogu biti reusable, nestable komponente

Glavna f-ja u fajlu iz koga se pozivaju ostale komponente, mora biti jedna default
export default function Profile() {

Ime f-je pocinje velikim slovom

return html ili

return (
  <div>html...
)
}

Ne definisi komponentu unutar neke komponente

Definisi komponente na vrhu fajla, a export default na dnu

Aplikacija pocinje sa root komponentom


Uzima glavnu komponentu iz drugog fajla
import Gallery from './Gallery.js';

Uzima ne-dafult komponentu iz drugog fajla
import { Profile } from './Gallery.js';


////

JSX

Ekstenzija za JS koja omogucava pisanje html unutar js fajla

Return samo jedan element
svi tagovi moraju biti zatvoreni

///

Viticasta je prozor za JS kod
alt={description}

Inline css sa dve viticaste
 <ul style={{
      backgroundColor: 'black',
      color: 'pink'
    }}>

//////

Defaultna vrednost za prop 

function Avatar({ person, size = 100 }) { }


Ako je komponenta nestovana u pozivanju, parent komponenta ce prihvatiti unutrasnju kao props "children"

<Card>
  <Avatar />
</Card>

Ako se prop promeni, menja se i sadrzaj

//////

Uslovi

Ako je if tacan vraca prvi markup, ako ne drugi
 if (isPacked) {
    return <li className="item">{name} ✔</li>;
  }
  return <li className="item">{name}</li>;

U jednom redu
{isPacked ? name + ' ✔' : name}

Kraci nacin, ako ispacked je true, dodaj znak
{name} {isPacked && '✔'}


ili
if (isPacked) {
  itemContent = name + " ✔";
}

Ne renderuje nista
return null;


////

Renderovanje Lista

const listItems = people.map(person => <li>{person}</li>);
return <ul>{listItems}</ul>;

Filtriranje po atributu
const chemists = people.filter(person =>
  person.profession === 'chemist'
);

Svaka stavka unutar map mora imati unikatni id

<li key={person.id}>...</li>

Poziva komponentu i lista je ukrug

const listItems = people.map(person =>
  <Fragment key={person.id}>
    <h1>{person.name}</h1>
    <p>{person.bio}</p>
  </Fragment>
);


/////

Komponenta mora biti cista

Ne menja objekte ili varijable koji su nastali pre nje
Sa istim inputom daje isti output

Event handler ne mora biti cist, input moze da se menja
Komponente se ne oslanjaju na renderovanje drugih komponenti
Ne treba menjati inpute koje komponente koriste za racunanje, ako mora upotrebi State
Napisi logiku unutar komponente ako je moguce


/////

UI kao drvo

kako se komponente nestuju tako se i html nestuje
Root app.js pozia childove, oni svoje itd

ako imamo ovo, ucita se inspiration, posle njega copyright
 <InspirationGenerator>
  <Copyright year={2004} />
</InspirationGenerator>


///////

Interaktivnost

Komponente pamte svoje vrednosti u state

Postupak - Trigerovanje, render, stavljanje u DOM

Menjanje State-a izaziva render, ali ga ne menja
Array moze biti state ali se ne treba menjati, treba napraviti novi


///

Dodavanje eventa - pravljenje f-je, i pozivanje u event handleru, prosledi se kao Prop onClick={handleClick}

Event handleri imaju pristup props-ovima komponenti

Event moze biti prop
<Button onClick={() => alert('Uploading!')}>

Ako i child i parent imaju event, prvo se odradi child

Prekida dalji tok eventa ka parentu
Moguce je ubaciti kod u prop
<button onClick={e => {
  e.stopPropagation();
  onClick();
}}>

e.preventDefault() sprecava da se posalje forma on submit

/////

Memorija specificna za komponentu je state, cesto treba promeniti ono sto se vidi na ekranu

Lokalne varijable ne ostaju iste izmedju renderovanja, njihove promena ne izazva render

useState hook cuva vrednost, i njegova promena izaziva renderovanje

Omogucava hook
import { useState } from 'react';

definise state
const [index, setIndex] = useState(0);

menja ga
setIndex(index + 1);

useState treba definisati na top nivou komponente, ne u if-u, loopu u i drugim f-jama

State je izolovan od sveta van komponente, i privatan. Ako se ponovi komponenta dvaputa, state u njima ce imati odvojene vrednosti.


//////

Triger renderovanja - inicijalni ili je neko promenio state
React renderuje komponente
Ubacuje u DOM, samo komponente koje su menjane

State vrednosti su fiksne dok se ne izvrsi render
Svaki render stvara nove varijable i event handlere

//////

Batching

React ceka dok se sav kod iz event handlera ne izvrsi pre nego sto izvrsi promenu u state

Izvrsi sva tri, ali je number uvek 0
<button onClick={() => {
  setNumber(number + 1);
  setNumber(number + 1);
  setNumber(number + 1);
}}>+3</button>

Updater f-ja, izvrsi ga i promeni vrednost, cuva je, ne racuna opet od 0
setNumber(n => n + 1);
praksa je da varijabla ima prvo slovo originalne varijable

///////

Tretiraj sve statove kao nepromenjive, kao read-only

Ovo ne uzrokuje render, mutacija
onPointerMove={e => {
  position.x = e.clientX;
  position.y = e.clientY;
}}
ili person.artwork.city = 'New Delhi';

Ovo uzrokuje
onPointerMove={e => {
  setPosition({
    x: e.clientX,
    y: e.clientY
  });
}}


Uzme state person, sa istim vrednostima samo promeni lastName
 setPerson({
    ...person,
    lastName: e.target.value
  });


Ako zelis da promeni samo city key, uz pomoc ...
setPerson({
...person, // Copy other fields
artwork: { // but replace the artwork
  ...person.artwork, // with the same one
  city: 'New Delhi' // but in New Delhi!
}
});

////////

Immer
npm install use-immer
import { useState } from 'react' - Promeni u  - import { useImmer } from 'use-immer'

State
const [person, updatePerson] = useImmer({
  name: 'Niki de Saint Phalle',
  artwork: {
    title: 'Blue Nana',
    city: 'Hamburg',
    image: 'https://i.imgur.com/Sd1AgUOm.jpg',
  }
});

Se menja ovako
updatePerson(draft => {
  draft.artwork.title = e.target.value;
});
Moze se koristiti uz useState

Nizovi u State trebaju se tretirati kao nepromenjivi

Dodavanje u niz
setArtists( // Replace the state
  [ // with a new array
    ...artists, // that contains all the old items
    { id: nextId++, name: name } // and one new item at the end
  ]
);


stavlja novu vrednost na pocetak
setArtists([
  { id: nextId++, name: name },
  ...artists // Put old items at the end
]);



Brise element iz niza
 setArtists(
  artists.filter(a =>
    a.id !== artist.id
  )
);


Menja niz tako sto napravi novi i u njemu promeni potrebne stavke

 const nextShapes = shapes.map(shape => {
  if (shape.type === 'square') {
    // No change
    return shape;
  } else {
    // Return a new circle 50px below
    return {
      ...shape,
      y: shape.y + 50,
    };
  }
});
// Re-render with the new array
setShapes(nextShapes);


Ako hoce da menja samo jedan element
const nextCounters = counters.map((c, i) => {
  if (i === index) {
    // Increment the clicked counter
    return c + 1;
  } else {
    // The rest haven't changed
    return c;
  }
});
setCounters(nextCounters);


Ubaciti novi element usred niza
const nextArtists = [
  // Items before the insertion point:
  ...artists.slice(0, insertAt),
  // New item:
  { id: nextId++, name: name },
  // Items after the insertion point:
  ...artists.slice(insertAt)
];



Obrnuti niz tako sto se napravi novi
const nextList = [...list];
nextList.reverse();
setList(nextList);


Menjanje objekta unutar niza

Kada se menja nestovan state, treba napraviti kopiju od mesta koji se menja do top levela

const myNextList = [...myList];
const artwork = myNextList.find(a => a.id === artworkId);
artwork.seen = nextSeen; // Problem: mutates an existing item

Treba menjati sa map
setMyList(myList.map(artwork => {
  if (artwork.id === artworkId) {
    // Create a *new* object with changes
    return { ...artwork, seen: nextSeen };
  } else {
    // No changes
    return artwork;
  }
}));

Sa immerom - uzme MyList, nadje element u nizu ciji id jednako prosledjeni id, i promeni mu .seen
Immer uvek stvara novi State od nule, na osnovu draft
updateMyList(draft => {
  const artwork = draft.find(a =>
    a.id === id
  );
  artwork.seen = nextSeen;
});


////

Upravljenje Statom

Osibine elemenata (enabled npr) se menjaju kroz state, a ne kroz kod
State ne treba sadrzati nepotrebne ili duple/ponovljene podatke
Ako dve komponente trebaju da dele State, onda on treba biti u parentu
Kada se komponenta re-renderuje, React neke delove DOM-a menja a neke pravi od pocetka. 
Ako zelimo da overajdujemo defaultno ponasanje, i da nateramo komponentu da se ponovo ucita, prosledimo 
<Chat key={email} /> , ako je ta vrednost nova, komponenta se pravi iz pocetka
Ako ima puno izmena kroz event handler, funcionalnost izmena State-ova moze biti van komponente, takva funcija je reducer 
import { useReducer } from 'react';
Kontekst omogucava parent komponenti da postavi vrednost koju sve child komponente mogu da vide. Child komponente mogu da je izmene, i onda ce njene child k. da vide novu vrednost
Reducer i kontekst se mogu ukombinovati da bi se smanjila slozensot koda

////

Reagovanje inputa i state-a

Kako se deklarativni UI razlikuje od imperativnog. U Reactu se html ne menja direktno.

Kako gledati UI deklarativno:

- Identifikuj razlicite izglede neke komponente
Napravi mockup, izgled svih mogucih stateova


Odredi sta okida izmenu state-ova
- Human i kompjuter input, okidaju izmenu

Predstavi State
- Sto manje stetova definisi

Ukloni nepotrebne state varijable
- State ne bi trebao biti paradoksalan (ako dva state ne mogu da budu true)
- Ako je vrednost nekog state vec unutar drugog
- Kada neki state ima vrednost suprotnoj drugom
- Reducer moze da ukloni nemoguce statove


Povezi event handlere sa stateom


///////

Struktura State-ova

Ako se dva state-a cesto menjaju zajedno, onda mogu postati jedan state
Izbegni kontradikcije u state-ovima
Izbegni nepotreban state, ako props moze izracunati potrebno
Izbegni duplikacije
Izbegni duboko nestovan state


const [position, setPosition] = useState({ x: 0, y: 0 });
umesto
const [x, setX] = useState(0);
const [y, setY] = useState(0);


const [status, setStatus] = useState('typing'); // 'typing' (initial), 'sending', and 'sent'
umesto
const [isSending, setIsSending] = useState(false);
const [isSent, setIsSent] = useState(false);


Ako state moze da se izracuna, ne bi trebalo staviti taj podatak u state
const [firstName, setFirstName] = useState('');
const [lastName, setLastName] = useState('');
const fullName = firstName + ' ' + lastName;


Kad dobije prop od parenta, napravi sa const
function Message({ messageColor }) {
  const color = messageColor;
}


items = [{ id: 0, title: 'pretzels'}, ...]
selectedItem = {id: 0, title: 'pretzels'}
treba
items = [{ id: 0, title: 'pretzels'}, ...]
selectedId = 0
Ne ponavlja se kontent u selectedItem

Umesto nestovanog state, bolje imati flat, sa manje nivoa dubine
Kada se elementi izbace iz state, memorija se oslobadja
Upotrebiti Immer za koncizniji kod


///////

Deljenje State izmedju komponenti

Da bi dve komponente imale isti state, on treba biti u najblizem parentu (lift their state up)
Prosledjuje se data iz parenta

Pozvana komponenta ima f-ju koju trigeruje child
Parent prosledjuje event handler
 <Panel
  title="Etymology"
  isActive={activeIndex === 1}
  onShow={() => setActiveIndex(1)}
>

<button onClick={onShow}>

Komponente mogu biti kontrolisane i nekontrolisane (imaju props, ili imaju svoj state)
Single source of truth / State treba biti definisan i menjan u jednoj odabranoj komponenti


/////

Cuvanje i resetovanje state-a 

Svaka komponenta ima izolovan state
Ako se komponenta ne pozove/unisti, state nestaje
Kada se komponenta sa istim nazivom pozove na istom mestu, ali kao novi tag, state ostaje isti
 {isFancy ? (
  <Counter isFancy={true} /> 
) : (
  <Counter isFancy={false} /> 
)}

Ali ako se wrapper promeni, komponenta se gubi
 {isFancy ? (
  <div>
    <Counter isFancy={true} /> 
  </div>
) : (
  <section>
    <Counter isFancy={false} />
  </section>
)}

Deklariši komponentu na top nivou, i ne nestuj njihovu definiciju